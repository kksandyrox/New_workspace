var httpd = require('http').createServer(handler);
var io = require('socket.io').listen(httpd);
var fs = require('fs');
	
	users = {};
	
httpd.listen(4000);

function handler(req, res) {
	fs.readFile(__dirname + '/index.html',
		function(err , data){
			if (err){
			res.writeHead(500);
			return res.end('Error');
		}
		res.writeHead(200);
		res.end(data);
		}
	);
}

io.sockets.on('connection', function(socket){
	socket.on('new user', function(data, callback){
		if (data in users){
			callback(false);
		} else{
			callback(true);
			socket.nickname = data;
			users[socket.nickname] = socket;
			updateNicknames();
		}
	});
	
	function updateNicknames(){
		io.sockets.emit('usernames', Object.keys(users));
	}

	socket.on('send message', function(data, callback){
		var msg = data.trim(); //remove spaces
		console.log('after trimming message is: ' + msg);
		if(msg.substr(0,3) === '/w '){ //check for whisper message
			msg = msg.substr(3);	//remmove the message part
			var ind = msg.indexOf(' '); 
			if(ind !== -1){
				var name = msg.substring(0, ind);
				var msg = msg.substring(ind + 1);
				if(name in users){
					users[name].emit('whisper', {msg: msg, nick: socket.nickname});
					console.log('message sent is: ' + msg);
					console.log('Whisper!');
				} else{
					callback('Error!  Enter a valid user.');
				}
			} else{
				callback('Error!  Please enter a message for your whisper.');
			}
		} else{
			io.sockets.emit('new message', {msg: msg, nick: socket.nickname});
		}
	});
	
	socket.on('disconnect', function(data){
		if(!socket.nickname) return;
		delete users[socket.nickname];
		updateNicknames();
	});
});